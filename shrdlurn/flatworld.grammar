(def @select select)
(def @change change)
(def @remove remove)

(def @R reverse)

(rule $ROOT ($Actions) (IdentityFn) (anchored 1)) # process for better

(rule $Actions ($Actions ; $Action) (lambda a1 (lambda a2 (:s (var a1) (var a2)))) (anchored 1))
(rule $Actions ($Action) (IdentityFn) (anchored 1))
(rule $Action ([ $Actions ]) (IdentityFn) (anchored 1))
(rule $Action (repeat $Numbers [ $Actions ]) (lambda n (lambda a (:rep (var n) (var a)))) (anchored 1))
(rule $Action (if $ValueSet [ $Actions ]) (lambda b (lambda a (:if (var b) (var a)))) (anchored 1))

# basic actions, local scope "for has color red [add red left; add red top]" 
(rule $Action (select $Sets [ $Actions ] ) (lambda s (lambda a (:scope (var s) (var a)))) (anchored 1))

# global actions
(rule $Action (select $Sets) (lambda s (: @select (var s))) (anchored 1))
(rule $Action (change $Rel to $SetValues) (lambda r (lambda v (: @change (var r) (var v)))) (anchored 1))
(rule $Action (remove) (ConstantFn (: @remove)) (anchored 1))

########### unary sets
(rule $Set (selected) selected (anchored 1))
(rule $Set (this) selected (anchored 1))
(rule $Set (all) * (anchored 1))

########### basic set operations
# just use or and filter, which does and

(for @op (or and)
(rule $Sets ($Sets @op $Set) (lambda s1 (lambda s2
					(@op (var s1) (var s2)))) (anchored 1))
(rule $ValueSets ($ValueSets @op $ValueSet) (lambda s1 (lambda s2
					(@op (var s1) (var s2)))) (anchored 1))
)
(rule $ValueSet (not $ValueSet) (lambda s (not (var s))) (anchored 1))
(rule $Set (not $Sets) (lambda s (not (var s))) (anchored 1))


(rule $ValueSets ($ValueSet) (IdentityFn) (anchored 1))
(rule $ValueSet ([ $ValueSets ]) (IdentityFn) (anchored 1))

(rule $Sets ($Set) (IdentityFn) (anchored 1))
(rule $Set ([ $Sets ]) (IdentityFn) (anchored 1))


############# Set of values
(rule $ValueSet ($Rel of $Sets) (lambda r (lambda s
			   ((@R (var r)) (var s)))) (anchored 1))
			   
(rule $Set (has $Rel $ValueSets) (lambda r (lambda s
			   ((var r) (var s)))) (anchored 1))

(for @rel (col row height color name age)
     (rule $Rel (@rel) (ConstantFn @rel) (anchored 1))
)


############### arithmetics
(for @op (+ -)
(rule $Numbers ($Number @op $Number) (lambda n1 (lambda op (lambda n2
(@op (var n1) (var n2))))) (anchored 1))
)

(rule $Number ([ $Numbers ]) (IdentityFn) (anchored 1))
(rule $Numbers ( $Number ) (IdentityFn) (anchored 1))
