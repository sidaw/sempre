# contextful top level functions
(def @root context:root)
(def @iff iff)
# actions
(def @add add)
(def @remove remove)

# action combinator
(def @seq seq)
(def @repeat repeat)

# cond and their combinator

(def @topColor top)
(def @contains has)
(def @all all)
(def @none none)

(def @compare compare)
(def @not not)
(def @combine logic)

# numbers and their operators
(def @get get)
(def @constant constant)
(def @negative negative)
(def @arith arith)

(def @rect context:rect)
(def @shift context:shift)
(def @argmin context:argmin)
(def @argmax context:argmax)

# mark
(def @mark context:mark)
(def @unmark context:unmark)
(def @marked marked)

# This grammar should have Rule.defaultIsFloating false
# TO TEST
# (context (graph NaiveKnowledgeGraph ((string [[1,2,3,4],[4,3,1],[2,2,1],[2,2,3],[3],[]]) (name b) (name c))))
# (set JavaExecutor.printStackTrace true)
####### Start of the actual grammar

(rule $ROOT ($ActionSeq) (lambda a (call @root (var a))) (anchored 1)) # process for better
(rule $Action ($ActionSeq if $CondSeq) (lambda a (lambda c (call @iff (var c) (var a)))) (anchored 1))

# combo actions
(rule $ActionSeq ($ActionSeq then $Action) (lambda a1 (lambda a2 (call @seq (var a1) (var a2)))) (anchored 1))
(rule $Action (repeat $ActionSeq $NumberSeq times) (lambda a (lambda n (call @repeat (var n) (var a)))) (anchored 1))

(rule $ActionSeq ($Action) (IdentityFn) (anchored 1))
(rule $Action ([ $ActionSeq ]) (IdentityFn) (anchored 1))

# combo conditions
(for @op (or and)
(rule $CondSeq ($CondSeq @op $Cond) (lambda c1 (lambda c2
					(call @combine (string @op) (var c1) (var c2)))) (anchored 1))
)
(rule $Cond (not $CondSeq) (lambda c (call @not (var c))) (anchored 1))

(rule $CondSeq ($Cond) (IdentityFn) (anchored 1))
(rule $Cond ([ $CondSeq ]) (IdentityFn) (anchored 1))

(rule $Action (remove) (ConstantFn (call @remove)) (anchored 1))
(rule $Action (add $Color) (lambda t (call @add (var t))) (anchored 1))

(rule $Action ( mark $CondSeq )
(lambda c (call @mark (var c) )) (anchored 1))
(rule $Action ( unmark $CondSeq )
(lambda c (call @unmark (var c))) (anchored 1))
(rule $Cond (marked)
(ConstantFn (call @marked)) (anchored 1))

(rule $Action ( select $CondSeq )
(lambda c (call @mark (var c) )) (anchored 1))
(rule $Action ( unselect $CondSeq )
(lambda c (call @unmark (var c))) (anchored 1))
(rule $Cond (selected)
(ConstantFn (call @marked)) (anchored 1))


# basic conditions
(rule $Cond (has $Color) (lambda t
			   (call @contains (var t))) (anchored 1))
(rule $Cond (top $Color) (lambda t
			      (call @topColor (var t))) (anchored 1))


(rule $Cond (all) (ConstantFn
			   (call @all)) (anchored 1))
(rule $Cond (none) (ConstantFn
			   (call @none)) (anchored 1))
			      
########### number stuff
(for @num (0 1 2 3 4 5 6 7 8 9)
(rule $Number (@num) (ConstantFn (call @constant (number @num))) (anchored 1))
)
(rule $Number (many) (ConstantFn (call @constant (number 10 infty))) (anchored 1))
(for @property (col row height)
     (rule $Number (@property) (ConstantFn (call @get (string @property))) (anchored 1))
)
(for @op (+ - %)
(rule $NumberSeq ($NumberSeq @op $Number) (lambda n1 (lambda n2
(call @arith (string @op)  (var n1) (var n2)))) (anchored 1))
)
(rule $Number ([ $NumberSeq ]) (IdentityFn) (anchored 1))
(rule $NumberSeq ( $Number ) (IdentityFn) (anchored 1))
(for @rel (> >= = < <=)
(rule $Cond ($NumberSeq @rel $NumberSeq) (lambda n1 (lambda n2
(call @compare (var n1) (string @rel) (var n2)))) (anchored 1))
)

########### context stuff
# relative stuff
(rule $Cond (argmin \( $CondSeq , $NumberSeq \) ) (lambda c (lambda n (call @argmin (var c) (var n))) (anchored 1)))
(rule $Cond (argmax \( $CondSeq , $NumberSeq \) ) (lambda c (lambda n (call @argmax (var c) (var n))) (anchored 1)))

(rule $Cond (inside $CondSeq ) (lambda c (call @rect (var c))) (anchored 1))
(rule $Cond (smallest $NumberSeq in $CondSeq ) (lambda n (lambda c (call @argmin (var c) (var n)))) (anchored 1))
(rule $Cond (largest $NumberSeq in $CondSeq ) (lambda n (lambda c (call @argmax (var c) (var n)))) (anchored 1))
(rule $Cond (smallest $NumberSeq ) (lambda n (call @argmin (var n))) (anchored 1))
(rule $Cond (largest $NumberSeq )  (lambda n (call @argmax (var n))) (anchored 1))


(rule $Cond (shift [ $CondSeq , $NumberSeq , $NumberSeq ] )
(lambda c (lambda n1 (lambda n2
      (call @shift (var c) (var n1) (var n2))))) (anchored 1))
(rule $Cond (shift [ $NumberSeq , $NumberSeq ] )
 (lambda n1 (lambda n2
      (call @shift (var n1) (var n2)))) (anchored 1))

(rule $Cond ( leftof $CondSeq )
(lambda c  (call @shift (var c)  (call @constant (number 0))  (call @constant (number 1)))) (anchored 1))
(rule $Cond ( rightof $CondSeq )
(lambda c  (call @shift (var c)  (call @constant (number 0))  (call @constant (number -1)))) (anchored 1))
(rule $Cond ( frontof $CondSeq )
(lambda c  (call @shift (var c)  (call @constant (number -1)) (call @constant (number 0)))) (anchored 1))
(rule $Cond ( backof $CondSeq )
(lambda c  (call @shift (var c)  (call @constant (number 1))  (call @constant (number 0 )))) (anchored 1))

(rule $Cond ( left )
 (ConstantFn (call @shift (call @constant (number 0))  (call @constant (number 1)))) (anchored 1))
(rule $Cond ( right )
 (ConstantFn (call @shift (call @constant (number 0))  (call @constant (number -1)))) (anchored 1))
(rule $Cond ( front )
 (ConstantFn (call @shift (call @constant (number -1)) (call @constant (number 0)))) (anchored 1))
(rule $Cond ( back )
 (ConstantFn (call @shift (call @constant (number 1))  (call @constant (number 0 )))) (anchored 1))


(rule $Color (red) (ConstantFn (number 0 COLOR)) (anchored 1))
(rule $Color (orange) (ConstantFn (number 1 COLOR)) (anchored 1))
(rule $Color (yellow) (ConstantFn (number 2 COLOR)) (anchored 1))
(rule $Color (green) (ConstantFn (number 3 COLOR)) (anchored 1))
(rule $Color (blue) (ConstantFn (number 4 COLOR)) (anchored 1))
(rule $Color (purple) (ConstantFn (number 5 COLOR)) (anchored 1))
(rule $Color (brown) (ConstantFn (number 6 COLOR)) (anchored 1))
(rule $Color (cyan) (ConstantFn (number 7 COLOR)) (anchored 1))
(rule $Color (trans) (ConstantFn (number 9 COLOR)) (anchored 1))
(rule $Color (glass) (ConstantFn (number 9 COLOR)) (anchored 1))
(rule $Color (mark) (ConstantFn (number 10 COLOR)) (anchored 1))

# keywords used for annotations
(rule $Keyword (add) (ConstantFn (string keyword)))
(rule $Keyword (remove) (ConstantFn (string keyword)))
(rule $Keyword (then) (ConstantFn (string keyword)))
(rule $Keyword (if) (ConstantFn (string keyword)))
(rule $Keyword (repeat) (ConstantFn (string keyword)))
(rule $Keyword (time) (ConstantFn (string keyword)))
(rule $Keyword (times) (ConstantFn (string keyword)))
(rule $Keyword (col) (ConstantFn (string keyword)))
(rule $Keyword (row) (ConstantFn (string keyword)))
(rule $Keyword (height) (ConstantFn (string keyword)))
(rule $Keyword (has) (ConstantFn (string keyword)))
(rule $Keyword (top) (ConstantFn (string keyword)))
(rule $Keyword (leftof) (ConstantFn (string keyword)))
(rule $Keyword (rightof) (ConstantFn (string keyword)))
(rule $Keyword (frontof) (ConstantFn (string keyword)))
(rule $Keyword (backof) (ConstantFn (string keyword)))
(rule $Keyword (of) (ConstantFn (string keyword)))
(rule $Keyword (and) (ConstantFn (string keyword)))
(rule $Keyword (or) (ConstantFn (string keyword)))
(rule $Keyword (+) (ConstantFn (string keyword)))
(rule $Keyword (-) (ConstantFn (string keyword)))
(rule $Keyword (%) (ConstantFn (string keyword)))
(rule $Keyword (=) (ConstantFn (string keyword)))
(rule $Keyword (<) (ConstantFn (string keyword)))
(rule $Keyword (>) (ConstantFn (string keyword)))
(rule $Keyword (!=) (ConstantFn (string keyword)))
(rule $Keyword (largest) (ConstantFn (string keyword)))
(rule $Keyword (smallest) (ConstantFn (string keyword)))
(rule $Keyword (%) (ConstantFn (string keyword)))
(rule $Keyword (inside) (ConstantFn (string keyword)))
(rule $Keyword (mark) (ConstantFn (string keyword)))
(rule $Keyword (unmark) (ConstantFn (string keyword)))
(rule $Keyword (marked) (ConstantFn (string keyword)))

# hard code tutorial rules, so they can always be accepted
(rule $Action ($Action except the border) (lambda $Action0 (call iff (call logic (string and) (call logic (string and) (call logic (string and) (call filter (call get (string row)) (string >) (number 1 count)) (call filter (call get (string col)) (string >) (number 1 count))) (call filter (call get (string row)) (string <) (number 8 count))) (call filter (call get (string col)) (string <) (number 8 count))) (var $Action0))))