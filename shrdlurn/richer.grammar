# contextful top level functions
(def @rootFn context:root)
(def @iff iff)
# actions
(def @add add)
(def @remove remove)

# action combiners
(def @serial seq)
(def @repeat repeat)

# filters and their combiners
(def @filter filter)
(def @topColor top)
(def @contains has)
(def @not not)
(def @combine logic)

(def @get get)

# This grammar should have Rule.defaultIsFloating false
# TO TEST
# (context (graph NaiveKnowledgeGraph ((string [[1,2,3,4],[4,3,1],[2,2,1],[2,2,3],[3],[]]) (name b) (name c))))
# (set JavaExecutor.printStackTrace true)
####### Start of the actual grammar

(rule $ROOT ($ActionSeq) (lambda a (call @rootFn (var a))) (anchored 1)) # process for better
(rule $Action ($ActionSeq if $CondSeq) (lambda a (lambda c (call @iff (var c) (var a)))) (anchored 1))

# combo actions
(rule $ActionSeq ($ActionSeq then $Action) (lambda a1 (lambda a2 (call @serial (var a1) (var a2)))) (anchored 1))
(rule $Action (repeat $ActionSeq $NUM time) (lambda a (lambda n (call @repeat (var n) (var a)))) (anchored 1))
(rule $Action (repeat $ActionSeq $NUM times) (lambda a (lambda n (call @repeat (var n) (var a)))) (anchored 1))

(rule $ActionSeq ($Action) (IdentityFn) (anchored 1))
(rule $Action ([ $ActionSeq ]) (IdentityFn) (anchored 1))

# combo conditions
(for @op (or and)
(rule $CondSeq ($CondSeq @op $Cond) (lambda c1 (lambda c2
					(call @combine (string @op) (var c1) (var c2)))) (anchored 1))
)
(rule $Cond (not $CondSeq) (lambda c (call @not (var c))) (anchored 1))

(rule $CondSeq ($Cond) (IdentityFn) (anchored 1))
(rule $Cond ([ $CondSeq ]) (IdentityFn) (anchored 1))

# relative stuff
# (rule $CondSeq (left $NUM of $CondSeq) (IdentityFn) (anchored 1))

# could remove some of these
(for @rel (> >= = < <= %2= %3= %4=)
(rule $Cond ($Getter @rel $NUM) (lambda g (lambda n
(call @filter (var g) (string @rel) (var n)))) (anchored 1))
)

(rule $Action (remove) (ConstantFn (call @remove)) (anchored 1))
(rule $Action (add $Color) (lambda t (call @add (var t))) (anchored 1))

(for @property (col row height)
     (rule $Getter (@property) (ConstantFn (call @get (string @property))) (anchored 1))
)

# basic conditions
(rule $Cond (has $Color) (lambda t
			   (call @contains (var t))) (anchored 1))
(rule $Cond (ha $Color) (lambda t
			      (call @contains (var t))) (anchored 1))
(rule $Cond (top $Color) (lambda t
			      (call @topColor (var t))) (anchored 1))

(for @num (0 1 2 3 4 5 6 7 8 9 10)
(rule $NUM (@num) (ConstantFn (number @num count)) (anchored 1))
)
(rule $NUM (many) (ConstantFn (number 10 infinity)) (anchored 1))

(rule $Color (cyan) (ConstantFn (number 0 COLOR)) (anchored 1))
(rule $Color (brown) (ConstantFn (number 1 COLOR)) (anchored 1))
(rule $Color (red) (ConstantFn (number 2 COLOR)) (anchored 1))
(rule $Color (orange) (ConstantFn (number 3 COLOR)) (anchored 1))
(rule $Color (yellow) (ConstantFn (number 4 COLOR)) (anchored 1))

# hard code tutorial rules, so they can always be accepted
(rule $Action ($Action except the border) (cubeworld.ApplyFn (lambda $Action0 (call iff (call logic (string and) (call logic (string and) (call logic (string and) (call filter (call get (string row)) (string >) (number 1 count)) (call filter (call get (string col)) (string >) (number 1 count))) (call filter (call get (string row)) (string <) (number 8 count))) (call filter (call get (string col)) (string <) (number 8 count))) (var $Action0)))) (anchored 1))

(rule $Action (add $NUM $Color if $CondSeq) (cubeworld.ApplyFn (lambda $NUM0 (lambda $Color1 (lambda $CondSeq2 (call iff (var $CondSeq2) (call repeat (var $NUM0) (call add (var $Color1))))))))  (anchored 1))

# keywords used for annotations
(rule $Keyword (add) (ConstantFn (string keyword)))
(rule $Keyword (remove) (ConstantFn (string keyword)))
(rule $Keyword (then) (ConstantFn (string keyword)))
(rule $Keyword (if) (ConstantFn (string keyword)))
(rule $Keyword (repeat) (ConstantFn (string keyword)))
(rule $Keyword (time) (ConstantFn (string keyword)))
(rule $Keyword (times) (ConstantFn (string keyword)))
(rule $Keyword (col) (ConstantFn (string keyword)))
(rule $Keyword (row) (ConstantFn (string keyword)))
(rule $Keyword (height) (ConstantFn (string keyword)))
(rule $Keyword (has) (ConstantFn (string keyword)))
(rule $Keyword (top) (ConstantFn (string keyword)))
(rule $Keyword (left) (ConstantFn (string keyword)))
(rule $Keyword (right) (ConstantFn (string keyword)))
(rule $Keyword (front) (ConstantFn (string keyword)))
(rule $Keyword (behind) (ConstantFn (string keyword)))
(rule $Keyword (of) (ConstantFn (string keyword)))
(rule $Keyword (and) (ConstantFn (string keyword)))
(rule $Keyword (or) (ConstantFn (string keyword)))
